<launch>

  <!-- Short-term hack to support the original front_laser:=true argument for spawning
       the simulator. This will be removed in favour of using the config:=x arg instead. -->
  <arg name="front_laser" default="false" />
  <arg name="default_config" value="front_laser" if="$(arg front_laser)" />
  <arg name="default_config" value="gmapping" unless="$(arg front_laser)" /> 
  <!-- end of hack -->

  <!-- Configuration of GVRBot which you would like to simulate.
       See gvrbot_description for details. -->
  <arg name="config" default="$(arg default_config)" />

  <!-- Load GVRBot's description, controllers, and teleop nodes. -->
  <include file="$(find gvrbot_description)/launch/description.launch">
    <arg name="config" value="$(arg config)" />
  </include>
  <include file="$(find gvrbot_control)/launch/control.launch" />

  <include file="$(find gvrbot_control)/launch/xbox360_teleop.launch"/>    
 
  <include file="$(find gvrbot_viz)/launch/view_robot.launch"/>

  <include file="$(find gvrbot_lidar)/launch/VLP16_points.launch"/>

  <!--include file="$(find gvrbot_camera)/launch/rs_d435_camera.launch"/-->

  <!--<include file="$(find usma_remote_interface)/launch/remote.launch"/>-->

  <!--include file="$(find gvrbot_web_server)/launch/web_server.launch"/-->

  <include file="$(find microstrain_mips)/launch/microstrain.launch">
    <arg name="imu_frame_id" default="imu_link" />
  </include>
 
  <include file="$(find gvrbot_cartographer_navigation)/launch/cartographer_demo.launch"/>

  <!--include file="$(find radbot_nuke)/launch/alldets.launch"/-->

  <include file="$(find gvrbot_navigation)/launch/include/move_base.launch"/>

  <!-- DML created this node to flip the cmd vel rotation published to the robot  -->
  <node pkg='gvrbot_control' type='control_flip.py' name='control_flip'/>

<!--
http://localhost:8080/stream?topic=/camera/color/image_raw&type=ros_compressed
-->

</launch>
